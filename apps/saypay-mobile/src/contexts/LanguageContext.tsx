import React, { createContext, useContext, useState, useEffect } from 'react';
import { storage } from '../utils/storage';

type Language = 'en' | 'hi' | 'es' | 'fr';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

// Translation dictionaries
const translations = {
  en: {
    // Navigation
    home: 'Home',
    record: 'Record',
    reports: 'Reports',
    settings: 'Settings',
    
    // Home Screen
    hello: 'Hello',
    trackExpenses: 'Track your expenses with voice',
    totalSpent: 'Total Spent',
    tapToRecord: 'Tap to Record',
    voiceYourExpense: 'Voice your expense',
    recentExpenses: 'Recent Expenses',
    viewAll: 'View All',
    noExpensesYet: 'No expenses yet',
    startRecording: 'Start recording your first expense!',
    
    // Recording Screen
    voiceExpense: 'Voice Expense',
    tapToRecordExpense: 'Tap to record expense',
    recording: 'Recording... Tap to stop',
    tapWhenFinished: 'Tap the button again when finished',
    processingWithAI: 'Processing with AI...',
    usingOpenAI: 'Using OpenAI Whisper & GPT-4o for max accuracy',
    transcription: 'Transcription',
    reviewAndEdit: 'Review & Edit',
    aiConfidence: 'AI Confidence',
    original: 'Original',
    amount: 'Amount',
    currency: 'Currency',
    description: 'Description',
    category: 'Category',
    date: 'Date',
    recordAgain: 'Record Again',
    saveExpense: 'Save Expense',
    
    // Auth
    login: 'Login',
    register: 'Register',
    email: 'Email',
    password: 'Password',
    fullName: 'Full Name',
    signIn: 'Sign In',
    createAccount: 'Create Account',
    
    // Common
    cancel: 'Cancel',
    save: 'Save',
    delete: 'Delete',
    edit: 'Edit',
    back: 'Back',
    loading: 'Loading...',
    error: 'Error',
    success: 'Success',
  },
  
  hi: {
    // Navigation
    home: '‡§π‡•ã‡§Æ',
    record: '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°',
    reports: '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü',
    settings: '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',
    
    // Home Screen
    hello: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á',
    trackExpenses: '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•á ‡§Ö‡§™‡§®‡•á ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç',
    totalSpent: '‡§ï‡•Å‡§≤ ‡§ñ‡§∞‡•ç‡§ö',
    tapToRecord: '‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡•à‡§™ ‡§ï‡§∞‡•á‡§Ç',
    voiceYourExpense: '‡§Ö‡§™‡§®‡§æ ‡§ñ‡§∞‡•ç‡§ö ‡§¨‡•ã‡§≤‡•á‡§Ç',
    recentExpenses: '‡§π‡§æ‡§≤ ‡§ï‡•á ‡§ñ‡§∞‡•ç‡§ö',
    viewAll: '‡§∏‡§≠‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç',
    noExpensesYet: '‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§ñ‡§∞‡•ç‡§ö ‡§®‡§π‡•Ä‡§Ç',
    startRecording: '‡§Ö‡§™‡§®‡§æ ‡§™‡§π‡§≤‡§æ ‡§ñ‡§∞‡•ç‡§ö ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç!',
    
    // Common
    cancel: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç',
    save: '‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç',
    delete: '‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç',
    edit: '‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç',
    back: '‡§µ‡§æ‡§™‡§∏',
    loading: '‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...',
    error: '‡§§‡•ç‡§∞‡•Å‡§ü‡§ø',
    success: '‡§∏‡§´‡§≤‡§§‡§æ',
  },
  
  es: {
    // Navigation
    home: 'Inicio',
    record: 'Grabar',
    reports: 'Informes',
    settings: 'Configuraci√≥n',
    
    // Home Screen
    hello: 'Hola',
    trackExpenses: 'Rastrea tus gastos con voz',
    totalSpent: 'Total Gastado',
    tapToRecord: 'Toca para Grabar',
    voiceYourExpense: 'Di tu gasto',
    recentExpenses: 'Gastos Recientes',
    viewAll: 'Ver Todo',
    noExpensesYet: 'A√∫n no hay gastos',
    startRecording: '¬°Comienza a grabar tu primer gasto!',
    
    // Common
    cancel: 'Cancelar',
    save: 'Guardar',
    delete: 'Eliminar',
    edit: 'Editar',
    back: 'Atr√°s',
    loading: 'Cargando...',
    error: 'Error',
    success: '√âxito',
  },
  
  fr: {
    // Navigation
    home: 'Accueil',
    record: 'Enregistrer',
    reports: 'Rapports',
    settings: 'Param√®tres',
    
    // Home Screen
    hello: 'Bonjour',
    trackExpenses: 'Suivez vos d√©penses avec la voix',
    totalSpent: 'Total D√©pens√©',
    tapToRecord: 'Appuyez pour Enregistrer',
    voiceYourExpense: 'Dites votre d√©pense',
    recentExpenses: 'D√©penses R√©centes',
    viewAll: 'Voir Tout',
    noExpensesYet: 'Aucune d√©pense pour le moment',
    startRecording: 'Commencez √† enregistrer votre premi√®re d√©pense!',
    
    // Common
    cancel: 'Annuler',
    save: 'Sauvegarder',
    delete: 'Supprimer',
    edit: 'Modifier',
    back: 'Retour',
    loading: 'Chargement...',
    error: 'Erreur',
    success: 'Succ√®s',
  },
};

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [language, setLanguageState] = useState<Language>('en');

  useEffect(() => {
    loadLanguage();
  }, []);

  const loadLanguage = async () => {
    try {
      const saved = await storage.getItem('app-language') as Language;
      if (saved) {
        setLanguageState(saved);
      }
    } catch (error) {
      console.error('Error loading language:', error);
    }
  };

  const setLanguage = async (lang: Language) => {
    setLanguageState(lang);
    await storage.setItem('app-language', lang);
  };

  const t = (key: string): string => {
    const translation = translations[language];
    return translation[key as keyof typeof translation] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const languageOptions = [
  { code: 'en' as Language, name: 'English', flag: 'üá∫üá∏' },
  { code: 'hi' as Language, name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
  { code: 'es' as Language, name: 'Espa√±ol', flag: 'üá™üá∏' },
  { code: 'fr' as Language, name: 'Fran√ßais', flag: 'üá´üá∑' },
];